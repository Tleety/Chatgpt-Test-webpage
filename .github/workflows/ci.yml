name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Go for WASM build
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build Go WASM module for tests
      run: |
        cd go-wasm-game
        GOOS=js GOARCH=wasm go build -o game.wasm
        
    - name: Setup Rust for Bevy WASM build
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Install cargo-tarpaulin for coverage
      run: cargo install cargo-tarpaulin
      
    - name: Run Bevy game unit tests
      run: |
        cd bevy-game
        cargo test --lib
        
    - name: Check Bevy game code coverage
      run: |
        cd bevy-game
        cargo tarpaulin --lib --out lcov --output-dir target/coverage || echo "Coverage check completed (note: WASM functions cannot be fully tested)"
      
    - name: Build Bevy WASM module for tests
      run: |
        cd bevy-game
        wasm-pack build --target web --out-dir pkg --no-typescript
      
    - name: Run unit tests
      run: npm test
      
    - name: Generate test results for test visualizer
      run: |
        npm test -- --json --outputFile=tests/test-results.json
        node -e "
        const fs = require('fs');
        try {
          const testResults = JSON.parse(fs.readFileSync('tests/test-results.json', 'utf8'));
          const summary = {
            timestamp: new Date().toISOString(),
            success: testResults.success,
            numTotalTests: testResults.numTotalTests,
            numPassedTests: testResults.numPassedTests,
            numFailedTests: testResults.numFailedTests,
            testSuites: testResults.testResults.map(suite => ({
              name: suite.name.replace(/.*\//, '').replace('.test.js', ''),
              status: suite.status,
              numPassingTests: suite.numPassingTests,
              numFailingTests: suite.numFailingTests,
              file: suite.name.replace(/.*\//, '')
            }))
          };
          fs.writeFileSync('tests/test-summary.json', JSON.stringify(summary, null, 2));
          console.log('Test summary saved to tests/test-summary.json');
        } catch (error) {
          console.log('Failed to generate test summary:', error.message);
          fs.writeFileSync('tests/test-summary.json', JSON.stringify({
            timestamp: new Date().toISOString(),
            success: false,
            numTotalTests: 0,
            numPassedTests: 0,
            numFailedTests: 0,
            testSuites: [],
            error: 'Failed to parse test results'
          }, null, 2));
        }
        "
      if: always()

  build:
    runs-on: ubuntu-latest
    name: Build Project
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Go for WASM build
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build Go WASM module
      run: |
        cd go-wasm-game
        GOOS=js GOARCH=wasm go build -o game.wasm
        
    - name: Setup Rust for Bevy WASM build
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Build Bevy WASM module
      run: |
        cd bevy-game
        wasm-pack build --target web --out-dir pkg --no-typescript
      
    - name: Install cargo-tarpaulin for coverage
      run: cargo install cargo-tarpaulin
      
    - name: Run Bevy game unit tests
      run: |
        cd bevy-game
        cargo test --lib
        
    - name: Check Bevy game code coverage
      run: |
        cd bevy-game
        cargo tarpaulin --lib --out lcov --output-dir target/coverage || echo "Coverage check completed (note: WASM functions cannot be fully tested)"
      
        
    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ./jekyll-site
        
    - name: Build Jekyll site
      run: |
        cd jekyll-site
        gem install bundler jekyll
        bundle install
        bundle exec jekyll build

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests and generate results for deployment
      run: |
        npm test -- --json --outputFile=tests/test-results.json || echo "Tests failed but continuing deployment"
        node -e "
        const fs = require('fs');
        try {
          const testResults = JSON.parse(fs.readFileSync('tests/test-results.json', 'utf8'));
          const summary = {
            timestamp: new Date().toISOString(),
            success: testResults.success,
            numTotalTests: testResults.numTotalTests,
            numPassedTests: testResults.numPassedTests,
            numFailedTests: testResults.numFailedTests,
            testSuites: testResults.testResults.map(suite => ({
              name: suite.name.replace(/.*\//, '').replace('.test.js', ''),
              status: suite.status,
              numPassingTests: suite.numPassingTests,
              numFailingTests: suite.numFailingTests,
              file: suite.name.replace(/.*\//, '')
            }))
          };
          fs.writeFileSync('tests/test-summary.json', JSON.stringify(summary, null, 2));
          console.log('Test summary saved for deployment');
        } catch (error) {
          console.log('Failed to generate test summary:', error.message);
          fs.writeFileSync('tests/test-summary.json', JSON.stringify({
            timestamp: new Date().toISOString(),
            success: false,
            numTotalTests: 0,
            numPassedTests: 0,
            numFailedTests: 0,
            testSuites: [],
            error: 'Failed to parse test results'
          }, null, 2));
        }
        "
      if: always()
      
    - name: Generate deployment info
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm run generate-deployment-info
        # Copy deployment.json to go-wasm-game directory for local access
        cp deployment.json go-wasm-game/deployment.json
        git add -f deployment.json go-wasm-game/deployment.json tests/test-summary.json
        git commit -m "chore: update deployment info and test results [skip ci]" || echo "No deployment info changes to commit"
        git push || echo "No changes to push"
      
    - name: Install dependencies (post deployment info generation)
      run: npm ci
      
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Setup Go for WASM build
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build Go WASM module
      run: |
        cd go-wasm-game
        GOOS=js GOARCH=wasm go build -o game.wasm
        
    - name: Setup Rust for Bevy WASM build
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Build Bevy WASM module
      run: |
        cd bevy-game
        wasm-pack build --target web --out-dir pkg --no-typescript
      
    - name: Install cargo-tarpaulin for coverage
      run: cargo install cargo-tarpaulin
      
    - name: Run Bevy game unit tests before deployment
      run: |
        cd bevy-game
        cargo test --lib
      
        
    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ./jekyll-site
        
    - name: Build Jekyll site
      run: |
        cd jekyll-site
        gem install bundler jekyll
        bundle install
        bundle exec jekyll build
        
    - name: Prepare deployment artifacts
      run: |
        mkdir -p _deployment
        rsync -av --exclude='_deployment' --exclude='node_modules' --exclude='.git' . _deployment/
        if [ -f deployment.json ]; then
          cp deployment.json _deployment/deployment.json
          # Ensure go-wasm-game directory also has deployment.json for local access
          cp deployment.json _deployment/go-wasm-game/deployment.json
        fi
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_deployment'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false