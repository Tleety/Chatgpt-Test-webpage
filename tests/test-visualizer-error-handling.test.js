/**
 * Test Visualizer Error Handling Tests
 * 
 * These tests verify that the test visualizer properly handles error scenarios
 * and provides adequate logging for debugging.
 */

describe('Test Visualizer Error Handling', () => {
  let consoleLogs = [];
  let originalConsole;

  beforeEach(() => {
    // Capture console logs
    consoleLogs = [];
    originalConsole = global.console;
    global.console = {
      log: (...args) => {
        consoleLogs.push({ type: 'log', args });
        originalConsole.log(...args);
      },
      error: (...args) => {
        consoleLogs.push({ type: 'error', args });
        originalConsole.error(...args);
      },
      warn: (...args) => {
        consoleLogs.push({ type: 'warn', args });
        originalConsole.warn(...args);
      }
    };
  });

  afterEach(() => {
    global.console = originalConsole;
  });

  test('should create proper error message format', () => {
    const errorMessage = 'Test results file not found (HTTP 404). This file is generated by the CI/CD pipeline when tests are run.';
    
    expect(errorMessage).toContain('Test results file not found');
    expect(errorMessage).toContain('HTTP 404');
    expect(errorMessage).toContain('CI/CD pipeline');
  });

  test('should handle different HTTP status codes appropriately', () => {
    const testCases = [
      { status: 404, expectedMessage: 'File likely missing' },
      { status: 500, expectedMessage: 'Server error' },
      { status: 403, expectedMessage: 'Permission denied' }
    ];

    testCases.forEach(({ status, expectedMessage }) => {
      let errorMessage = `Test results file not found (HTTP ${status}).`;
      
      if (status === 404) {
        errorMessage += ' This file is generated by the CI/CD pipeline when tests are run.';
      } else if (status >= 500) {
        errorMessage += ' Server error occurred while fetching test results.';
      } else if (status === 403) {
        errorMessage += ' Access denied to test results file.';
      }
      
      expect(errorMessage).toContain(`HTTP ${status}`);
    });
  });

  test('should log with proper prefix for debugging', () => {
    const prefix = '[Test Visualizer]';
    console.log(`${prefix} Test log message`);
    console.error(`${prefix} Test error message`);
    
    const logMessages = consoleLogs.filter(log => 
      log.args.some(arg => typeof arg === 'string' && arg.includes(prefix))
    );
    
    expect(logMessages.length).toBeGreaterThan(0);
    expect(logMessages[0].args[0]).toContain(prefix);
  });

  test('should include debug information in error context', () => {
    const debugInfo = {
      timestamp: new Date().toISOString(),
      url: 'http://localhost:8000/test-results.html',
      online: true,
      expectedPath: './tests/test-summary.json'
    };

    expect(debugInfo.timestamp).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/);
    expect(debugInfo.url).toContain('test-results.html');
    expect(debugInfo.online).toBe(true);
    expect(debugInfo.expectedPath).toBe('./tests/test-summary.json');
  });

  test('should provide troubleshooting instructions', () => {
    const troubleshootingMessage = 'Check the browser\'s developer console (F12) for detailed error logs with [Test Visualizer] prefix.';
    
    expect(troubleshootingMessage).toContain('developer console');
    expect(troubleshootingMessage).toContain('F12');
    expect(troubleshootingMessage).toContain('[Test Visualizer] prefix');
  });

  test('should validate test summary structure', () => {
    const mockTestSummary = {
      timestamp: new Date().toISOString(),
      success: true,
      numTotalTests: 170,
      numPassedTests: 170,
      numFailedTests: 0,
      testSuites: [
        {
          name: 'snake game logic',
          file: 'snake-game-logic.test.js',
          status: 'passed',
          numPassingTests: 67,
          numFailingTests: 0
        }
      ],
      source: 'Jest test runner'
    };

    expect(mockTestSummary).toHaveProperty('timestamp');
    expect(mockTestSummary).toHaveProperty('success');
    expect(mockTestSummary).toHaveProperty('numTotalTests');
    expect(mockTestSummary).toHaveProperty('numPassedTests');
    expect(mockTestSummary).toHaveProperty('numFailedTests');
    expect(mockTestSummary).toHaveProperty('testSuites');
    expect(mockTestSummary).toHaveProperty('source');
    
    expect(mockTestSummary.testSuites).toBeInstanceOf(Array);
    expect(mockTestSummary.testSuites[0]).toHaveProperty('name');
    expect(mockTestSummary.testSuites[0]).toHaveProperty('file');
    expect(mockTestSummary.testSuites[0]).toHaveProperty('status');
  });
});