{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":6,"numPassedTests":146,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":6,"numTotalTests":146,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1754422193939,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should create deployment info with correct structure","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should create deployment info with correct structure"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should generate correct version format from GitHub run number","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate correct version format from GitHub run number"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should handle different run numbers correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle different run numbers correctly"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should use default values when environment variables are missing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should use default values when environment variables are missing"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should create deployment.json file with correct content","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create deployment.json file with correct content"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should include timestamp and deployment time","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should include timestamp and deployment time"},{"ancestorTitles":["Deployment Info Generation","generateDeploymentInfo function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation generateDeploymentInfo function should extract branch name from GitHub ref","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract branch name from GitHub ref"},{"ancestorTitles":["Deployment Info Generation","CI/CD Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation CI/CD Integration should have generate-deployment-info script in package.json","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have generate-deployment-info script in package.json"},{"ancestorTitles":["Deployment Info Generation","CI/CD Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation CI/CD Integration should have CI workflow that includes deployment info generation","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have CI workflow that includes deployment info generation"},{"ancestorTitles":["Deployment Info Generation","CI/CD Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation CI/CD Integration should have deployment.json in .gitignore","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have deployment.json in .gitignore"},{"ancestorTitles":["Deployment Info Generation","Version Display Integration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation Version Display Integration should load version from deployment.json in top bar","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should load version from deployment.json in top bar"},{"ancestorTitles":["Deployment Info Generation","Version Display Integration"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Deployment Info Generation Version Display Integration should fallback to default version when GitHub API and deployment.json fail","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fallback to default version when GitHub API and deployment.json fail"}],"endTime":1754422194478,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/deployment-info.test.js","startTime":1754422194276,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SnakeGameLogic","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Initialization should initialize with correct default values","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should initialize with correct default values"},{"ancestorTitles":["SnakeGameLogic","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Initialization should place snake in center of game area","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should place snake in center of game area"},{"ancestorTitles":["SnakeGameLogic","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Initialization should place food at valid position","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should place food at valid position"},{"ancestorTitles":["SnakeGameLogic","Direction Changes"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Direction Changes should allow valid direction changes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow valid direction changes"},{"ancestorTitles":["SnakeGameLogic","Direction Changes"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Direction Changes should prevent 180-degree turns","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should prevent 180-degree turns"},{"ancestorTitles":["SnakeGameLogic","Direction Changes"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Direction Changes should validate direction changes correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should validate direction changes correctly"},{"ancestorTitles":["SnakeGameLogic","Collision Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Collision Detection should detect wall collisions","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should detect wall collisions"},{"ancestorTitles":["SnakeGameLogic","Collision Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Collision Detection should detect self collisions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect self collisions"},{"ancestorTitles":["SnakeGameLogic","Collision Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Collision Detection should detect food collisions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect food collisions"},{"ancestorTitles":["SnakeGameLogic","Snake Movement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Snake Movement should move snake forward correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should move snake forward correctly"},{"ancestorTitles":["SnakeGameLogic","Snake Movement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Snake Movement should grow snake when eating food","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should grow snake when eating food"},{"ancestorTitles":["SnakeGameLogic","Snake Movement"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Snake Movement should detect collision with wall","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect collision with wall"},{"ancestorTitles":["SnakeGameLogic","Snake Movement"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Snake Movement should detect collision with self","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect collision with self"},{"ancestorTitles":["SnakeGameLogic","Food Placement"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Food Placement should place food in valid grid positions","invocations":1,"location":null,"numPassingAsserts":60,"retryReasons":[],"status":"passed","title":"should place food in valid grid positions"},{"ancestorTitles":["SnakeGameLogic","Food Placement"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Food Placement should not place food on snake body","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not place food on snake body"},{"ancestorTitles":["SnakeGameLogic","Game State"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Game State should return complete game state","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return complete game state"},{"ancestorTitles":["SnakeGameLogic","Game State"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Game State should reset game state correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reset game state correctly"},{"ancestorTitles":["SnakeGameLogic","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Edge Cases should handle very small game area","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle very small game area"},{"ancestorTitles":["SnakeGameLogic","Edge Cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Edge Cases should handle food placement when most spaces are occupied","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle food placement when most spaces are occupied"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperience"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperience should return 0 when no experience exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no experience exists"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperience"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperience should return stored experience from localStorage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return stored experience from localStorage"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperience should handle corrupted localStorage data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle corrupted localStorage data"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","addExperience"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management addExperience should add experience points","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add experience points"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","addExperience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management addExperience should accumulate experience points","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accumulate experience points"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","addExperience"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management addExperience should persist experience in localStorage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should persist experience in localStorage"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperienceRequiredForLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperienceRequiredForLevel should return correct experience for level 1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct experience for level 1"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperienceRequiredForLevel"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperienceRequiredForLevel should return correct experience for early levels","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return correct experience for early levels"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperienceRequiredForLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperienceRequiredForLevel should handle level 0 and negative levels","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle level 0 and negative levels"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getLevel should return level 1 for 0-4 experience","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return level 1 for 0-4 experience"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getLevel should return correct level for various experience amounts","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return correct level for various experience amounts"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getLevel should handle higher experience levels","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle higher experience levels"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperienceToNextLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperienceToNextLevel should return correct experience needed for next level","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct experience needed for next level"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","getExperienceToNextLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management getExperienceToNextLevel should return correct amount when at exact level threshold","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct amount when at exact level threshold"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","clearExperience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management clearExperience should remove experience from localStorage","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove experience from localStorage"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","experience integration with game mechanics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management experience integration with game mechanics should award experience when eating food based on current level","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should award experience when eating food based on current level"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","experience integration with game mechanics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management experience integration with game mechanics should award exponentially more experience at higher levels","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should award exponentially more experience at higher levels"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","experience integration with game mechanics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management experience integration with game mechanics should not award experience when not eating food","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not award experience when not eating food"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","experience integration with game mechanics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management experience integration with game mechanics should preserve experience when game resets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should preserve experience when game resets"},{"ancestorTitles":["SnakeGameLogic","Experience and Level Management","experience integration with game mechanics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Experience and Level Management experience integration with game mechanics should include experience and level in game state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should include experience and level in game state"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","generateObstacles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management generateObstacles should generate no obstacles at level 1 and 2","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate no obstacles at level 1 and 2"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","generateObstacles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management generateObstacles should generate obstacles starting at level 3","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate obstacles starting at level 3"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","generateObstacles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management generateObstacles should generate more obstacles at higher levels","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should generate more obstacles at higher levels"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","generateObstacles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management generateObstacles should cap obstacles at reasonable number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cap obstacles at reasonable number"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","placeObstacle"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management placeObstacle should place obstacles in valid grid positions","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should place obstacles in valid grid positions"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","placeObstacle"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management placeObstacle should not place obstacles on snake or in safe zone","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not place obstacles on snake or in safe zone"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","isObstacleCollision"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management isObstacleCollision should detect collision with obstacles","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect collision with obstacles"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","isObstacleCollision"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management isObstacleCollision should return false when no obstacles exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no obstacles exist"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","food placement with obstacles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management food placement with obstacles should not place food on obstacles","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not place food on obstacles"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","collision detection integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management collision detection integration should detect collision with obstacles during movement","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect collision with obstacles during movement"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","collision detection integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management collision detection integration should allow movement when no obstacle collision","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow movement when no obstacle collision"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","game state with obstacles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management game state with obstacles should include obstacles in game state","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should include obstacles in game state"},{"ancestorTitles":["SnakeGameLogic","Obstacle Management","game state with obstacles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic Obstacle Management game state with obstacles should reset obstacles when game resets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reset obstacles when game resets"},{"ancestorTitles":["SnakeGameLogic","High Score Management","getHighScores"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management getHighScores should return empty array when no scores exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no scores exist"},{"ancestorTitles":["SnakeGameLogic","High Score Management","getHighScores"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management getHighScores should return parsed scores from localStorage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return parsed scores from localStorage"},{"ancestorTitles":["SnakeGameLogic","High Score Management","getHighScores"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management getHighScores should handle corrupted localStorage data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle corrupted localStorage data"},{"ancestorTitles":["SnakeGameLogic","High Score Management","isHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management isHighScore should return false for zero or negative scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false for zero or negative scores"},{"ancestorTitles":["SnakeGameLogic","High Score Management","isHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management isHighScore should return true when no scores exist and score is positive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when no scores exist and score is positive"},{"ancestorTitles":["SnakeGameLogic","High Score Management","isHighScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management isHighScore should return true when less than 10 scores exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when less than 10 scores exist"},{"ancestorTitles":["SnakeGameLogic","High Score Management","isHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management isHighScore should return true when score beats lowest of 10 scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when score beats lowest of 10 scores"},{"ancestorTitles":["SnakeGameLogic","High Score Management","isHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management isHighScore should return false when score does not beat lowest of 10 scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false when score does not beat lowest of 10 scores"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should add score when list is empty","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add score when list is empty"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should add score and maintain sort order","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add score and maintain sort order"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should limit to top 10 scores","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should limit to top 10 scores"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should not add score that does not qualify","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not add score that does not qualify"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should handle empty name by using Anonymous","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty name by using Anonymous"},{"ancestorTitles":["SnakeGameLogic","High Score Management","addHighScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management addHighScore should trim whitespace from names","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should trim whitespace from names"},{"ancestorTitles":["SnakeGameLogic","High Score Management","clearHighScores"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SnakeGameLogic High Score Management clearHighScores should remove all high scores","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove all high scores"}],"endTime":1754422194598,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/snake-game-logic.test.js","startTime":1754422194513,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should include version information in the top bar","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include version information in the top bar"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should maintain existing structure with logo, title, and navigation","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should maintain existing structure with logo, title, and navigation"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should respect pathToRoot option for relative paths","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should respect pathToRoot option for relative paths"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should use fallback version when deployment.json and package.json fail to load","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use fallback version when deployment.json and package.json fail to load"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should fallback to local deployment.json when GitHub API fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fallback to local deployment.json when GitHub API fails"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should use version from GitHub releases API when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use version from GitHub releases API when available"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should use commit SHA when no releases are available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use commit SHA when no releases are available"},{"ancestorTitles":["Top Bar Component","createTopBar function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component createTopBar function should fallback to default version when GitHub API and local files fail","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fallback to default version when GitHub API and local files fail"},{"ancestorTitles":["Top Bar Component","insertTopBar function"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component insertTopBar function should insert top bar as first element in body","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should insert top bar as first element in body"},{"ancestorTitles":["Top Bar Component","insertTopBar function"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component insertTopBar function should not insert duplicate top bar","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not insert duplicate top bar"},{"ancestorTitles":["Top Bar Component","updateFaviconPath function"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component updateFaviconPath function should update favicon href with correct base path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update favicon href with correct base path"},{"ancestorTitles":["Top Bar Component","updateFaviconPath function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component updateFaviconPath function should handle missing favicon gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing favicon gracefully"},{"ancestorTitles":["Top Bar Component","updateFaviconPath function"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Top Bar Component updateFaviconPath function should update favicon when inserting top bar","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update favicon when inserting top bar"}],"endTime":1754422194717,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/top-bar.test.js","startTime":1754422194628,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Snake Game UI"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should prevent default behavior for arrow keys","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should prevent default behavior for arrow keys"},{"ancestorTitles":["Snake Game UI"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should not prevent default for non-arrow keys","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should not prevent default for non-arrow keys"},{"ancestorTitles":["Snake Game UI"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should prevent default for Space key when game is not running","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent default for Space key when game is not running"},{"ancestorTitles":["Snake Game UI"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should not prevent default for Space key when game is running","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not prevent default for Space key when game is running"},{"ancestorTitles":["Snake Game UI"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should verify game over overlay positioning when displayed","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should verify game over overlay positioning when displayed"},{"ancestorTitles":["Snake Game UI"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Snake Game UI should display level and experience information in UI","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should display level and experience information in UI"}],"endTime":1754422194809,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/snake-game-ui.test.js","startTime":1754422194736,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["TodoListLogic","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Initialization should initialize with empty tasks array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with empty tasks array"},{"ancestorTitles":["TodoListLogic","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Initialization should load tasks from localStorage when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should load tasks from localStorage when available"},{"ancestorTitles":["TodoListLogic","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Initialization should return empty array when no saved tasks exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no saved tasks exist"},{"ancestorTitles":["TodoListLogic","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Initialization should initialize with tasks from storage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with tasks from storage"},{"ancestorTitles":["TodoListLogic","Adding Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Adding Tasks should add a valid task","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should add a valid task"},{"ancestorTitles":["TodoListLogic","Adding Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Adding Tasks should trim whitespace from task text","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should trim whitespace from task text"},{"ancestorTitles":["TodoListLogic","Adding Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Adding Tasks should not add empty tasks","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should not add empty tasks"},{"ancestorTitles":["TodoListLogic","Adding Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Adding Tasks should assign unique IDs to tasks","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should assign unique IDs to tasks"},{"ancestorTitles":["TodoListLogic","Adding Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Adding Tasks should save tasks to localStorage after adding","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save tasks to localStorage after adding"},{"ancestorTitles":["TodoListLogic","Toggling Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Toggling Tasks should toggle task completion status","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should toggle task completion status"},{"ancestorTitles":["TodoListLogic","Toggling Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Toggling Tasks should return false for non-existent task ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-existent task ID"},{"ancestorTitles":["TodoListLogic","Toggling Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Toggling Tasks should save tasks to localStorage after toggling","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save tasks to localStorage after toggling"},{"ancestorTitles":["TodoListLogic","Deleting Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Deleting Tasks should delete existing task","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete existing task"},{"ancestorTitles":["TodoListLogic","Deleting Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Deleting Tasks should return false for non-existent task ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false for non-existent task ID"},{"ancestorTitles":["TodoListLogic","Deleting Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Deleting Tasks should save tasks to localStorage after deleting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save tasks to localStorage after deleting"},{"ancestorTitles":["TodoListLogic","Task Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Retrieval should return all tasks","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all tasks"},{"ancestorTitles":["TodoListLogic","Task Retrieval"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Retrieval should return completed tasks only","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return completed tasks only"},{"ancestorTitles":["TodoListLogic","Task Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Retrieval should return pending tasks only","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return pending tasks only"},{"ancestorTitles":["TodoListLogic","Task Retrieval"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Retrieval should find task by ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should find task by ID"},{"ancestorTitles":["TodoListLogic","Task Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Retrieval should return null for non-existent task ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent task ID"},{"ancestorTitles":["TodoListLogic","Task Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Statistics should return correct stats for empty list","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct stats for empty list"},{"ancestorTitles":["TodoListLogic","Task Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Task Statistics should return correct stats with mixed tasks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct stats with mixed tasks"},{"ancestorTitles":["TodoListLogic","Updating Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Updating Tasks should update task text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update task text"},{"ancestorTitles":["TodoListLogic","Updating Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Updating Tasks should trim whitespace when updating","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should trim whitespace when updating"},{"ancestorTitles":["TodoListLogic","Updating Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Updating Tasks should not update with empty text","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not update with empty text"},{"ancestorTitles":["TodoListLogic","Updating Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Updating Tasks should return false for non-existent task ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-existent task ID"},{"ancestorTitles":["TodoListLogic","Updating Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Updating Tasks should save tasks to localStorage after updating","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save tasks to localStorage after updating"},{"ancestorTitles":["TodoListLogic","Clearing Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Clearing Tasks should clear all tasks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear all tasks"},{"ancestorTitles":["TodoListLogic","Clearing Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Clearing Tasks should clear completed tasks only","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clear completed tasks only"},{"ancestorTitles":["TodoListLogic","Clearing Tasks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Clearing Tasks should return 0 when no completed tasks to clear","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no completed tasks to clear"},{"ancestorTitles":["TodoListLogic","Clearing Tasks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Clearing Tasks should save tasks to localStorage after clearing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save tasks to localStorage after clearing"},{"ancestorTitles":["TodoListLogic","HTML Escaping"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic HTML Escaping should escape HTML characters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should escape HTML characters"},{"ancestorTitles":["TodoListLogic","HTML Escaping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic HTML Escaping should handle empty and normal text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty and normal text"},{"ancestorTitles":["TodoListLogic","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Edge Cases should handle operations on empty task list","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle operations on empty task list"},{"ancestorTitles":["TodoListLogic","Edge Cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Edge Cases should handle multiple rapid additions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle multiple rapid additions"},{"ancestorTitles":["TodoListLogic","Edge Cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic Edge Cases should preserve task order","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should preserve task order"},{"ancestorTitles":["TodoListLogic","LocalStorage Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic LocalStorage Integration should handle localStorage unavailable gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle localStorage unavailable gracefully"},{"ancestorTitles":["TodoListLogic","LocalStorage Integration"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"TodoListLogic LocalStorage Integration should handle corrupt localStorage data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle corrupt localStorage data"}],"endTime":1754422194889,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/todo-list-logic.test.js","startTime":1754422194817,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Version Update System","Bump Version Script"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System Bump Version Script should increment patch version correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should increment patch version correctly"},{"ancestorTitles":["Version Update System","Bump Version Script"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System Bump Version Script should handle invalid version format","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid version format"},{"ancestorTitles":["Version Update System","CI/CD Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System CI/CD Integration should have bump-version script in package.json","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have bump-version script in package.json"},{"ancestorTitles":["Version Update System","CI/CD Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System CI/CD Integration should have CI workflow that includes deployment info generation","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have CI workflow that includes deployment info generation"},{"ancestorTitles":["Version Update System","CI/CD Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System CI/CD Integration should have deployment info generation before build artifacts are created","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have deployment info generation before build artifacts are created"},{"ancestorTitles":["Version Update System","Version Display Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System Version Display Integration should include version from deployment.json in top bar when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include version from deployment.json in top bar when available"},{"ancestorTitles":["Version Update System","Version Display Integration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System Version Display Integration should fallback to default version when deployment.json is not available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fallback to default version when deployment.json is not available"},{"ancestorTitles":["Version Update System","Version Display Integration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System Version Display Integration should try multiple paths for deployment.json","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should try multiple paths for deployment.json"},{"ancestorTitles":["Version Update System","End-to-End Deployment Info Validation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System End-to-End Deployment Info Validation should validate that deployment info generation script exists and is executable","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate that deployment info generation script exists and is executable"},{"ancestorTitles":["Version Update System","End-to-End Deployment Info Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Version Update System End-to-End Deployment Info Validation should validate that CI workflow deploys updated deployment info","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate that CI workflow deploys updated deployment info"}],"endTime":1754422194947,"message":"","name":"/home/runner/work/Chatgpt-Test-webpage/Chatgpt-Test-webpage/version-update.test.js","startTime":1754422194898,"status":"passed","summary":""}],"wasInterrupted":false}
